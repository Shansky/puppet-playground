#!/bin/bash

toasterdir='toasters/'

showhelp () {
cat << EOF
Play in Puppet Playground.

Usage: $0 <action> [argument]
$0 status                - Show active playground status
$0 list                  - List available toasters
$0 install <toaster>     - Install the specified toaster on the playground
$0 import <toaster_path> - Import a toaster from the specified path
$0 run                   - Run Puppet on current playground
$0 clean                 - Clean up the playground
$0 setup default         - Reinstall the default Vagrantfile (puppet files not touched)
$0 setup example42       - Install the full Example42 modules set in modules
$0 forge <command>       - Execute puppet module commands to interact with puppetForge
$0 puppi <command>       - Execute puppi commands on the running boxes
EOF
}

SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_TITLE="echo -en \\033[0;35m"
SETCOLOR_BOLD="echo -en \\033[0;1m"

echo_title () {
 echo
 $SETCOLOR_BOLD ; echo $1 ; $SETCOLOR_NORMAL
}

ask_confirm () {
cat << EOF
I'm going to wipe out the current Playground:
- modules/ directory
- manifests/init.pp
- Puppetfile
- Vagrantfile (optionally)

Do you really want to destroy the Playground? (y/N)
Answer NO if you have valuable changes in those files.
EOF

  read answer
  [ "x$answer" == "xy" ] || exit 3
}

list_toaster() {
  echo_title "Available toasters for $0 install"
  ls -1 $toasterdir
}

install_toaster() {
  ask_confirm

  echo_title "Installing toaster $1 in the Playground"
  cp -f $1/Puppetfile Puppetfile
  cp -f $1/init.pp manifests/init.pp
  [ -f $1/Vagrantfile ] && cp -f $1/Vagrantfile Vagrantfile

  echo_title "Running librarian-puppet install"  
  librarian-puppet install
}

run_playground() {
  echo_title "Running the playground (vagrant provision ;-)"
  vagrant provision
}

run_puppi() {
  echo_title "Running puppi $puppi_action on the active boxes of the Playground"
  for vm in $(vagrant status | grep 'running$' | cut -d ' ' -f 1 ) ; do
    echo_title "puppi check on $vm"
    vagrant ssh $vm -c "sudo puppi $puppi_action"
  done
}

run_forge() {
  echo_title "Executing: puppet module $forge_action --modulepath modules/"
  puppet module $forge_action --modulepath modules/
}

setup_example42() {
  clean
  echo_title "Setting up Example42 NetGen modules"
  git clone --recursive https://github.com/example42/puppet-modules-nextgen.git modules
}

setup_default() {
  echo_title "Recovering default Vagrantfile"
  cp -f Vagrantfile.default Vagrantfile
}

clean() {
  ask_confirm
  echo_title "Removing modules dir, manifests/init.pp and Puppetfile from the Playground"
  rm -rf modules/
  rm -f Puppetfile
  rm -f Puppetfile.lock
  rm -f manifests/init.pp
}

status() {
  echo_title "Modules status (puppet module list --modulepath=modules/) "
  puppet module list --modulepath=modules/

  echo_title "Modules status (librarian-puppet show) "
  librarian-puppet show

  echo_title "Content of modules/ directory "
  ls -l modules/
  
  echo_title "Content of manifests/init.pp"
  cat manifests/init.pp

  echo_title "Vagrant Status"
  vagrant status
}

while [ $# -gt 0 ]; do
  case "$1" in
    list)
      action=$1
      shift
      ;;
    clean)
      action=$1
      shift
      ;;
    status)
      action=$1
      shift
      ;;
    install)
      action=$1
      toaster=$2
      shift 2
      ;;
    import)
      action=$1
      toaster_path=$2
      shift 2
      ;;
    run)
      action=$1
      shift 1
      ;;
    import)
      action=$1
      import_path=$2
      shift 2
      ;;
    setup)
      action=$1
      setup_action=$2
      shift 2
      ;;
    puppi)
      action=$1
      shift
      puppi_action=$*
      shift $#
      ;;
    forge)
      action=$1
      shift
      forge_action=$*
      shift $#
      ;;
    *)
      showhelp
      exit
      ;;
  esac
done

case $action in 
  list) list_toaster ;;
  install) install_toaster $toasterdir/$toaster ;;
  import) install_toaster $toaster_path ;;
  clean) clean ;;
  status) status ;;
  run ) run_playground ;;
  setup ) setup_$setup_action ;;
  forge ) run_forge ;;
  puppi ) run_puppi ;;
  * ) showhelp ;;
esac

